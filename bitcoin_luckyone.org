#+title: luckyone

**** 源码

#+BEGIN_SRC js

contract LuckyOne 
{
    address owner; 
    uint testluckyone;
    uint public numaddrs;
    uint public numwiners;
    event Log(address _from, address _to, string _func, string _msg, uint _value);
    //event GetBalance(uint _value);
    struct betinfo 
    {
        uint choice;
        uint value; 
    }
    mapping(address => betinfo) public betinfos; 
    mapping(uint => address) public addrs;
    mapping(uint => address) public winers;
    function LuckyOne() 
    {
        owner = msg.sender;
    }
    function kill()
    {
        if (msg.sender == owner)
            suicide(owner);
    }
    function getBalance() returns (uint) 
    {
        Log(msg.sender, 0, "getBalance()", "0", this.balance);
        return this.balance;
    }
    function adminWithdraw()
    {
        if (owner != msg.sender)
            return;
        msg.sender.send(this.balance);
    }
    function bet(uint choice) public
    {
        Log(msg.sender, 0, "bet()=>", "0", choice);
        Log(msg.sender, 0, "bet()=>", "0", msg.value);
        betinfos[msg.sender] = betinfo({choice: choice, value: msg.value});
        addrs[numaddrs++] = msg.sender;
    }
    function setlucky(uint num) public
    {
        if (owner != msg.sender)
            throw;
        Log(msg.sender, 0, "before setlucky()=>", "0", testluckyone);
        Log(msg.sender, 0, "after setlucky()=>", "0", num);
        testluckyone = num;
    }

    function getvalue(address client_addr) returns (uint) 
    {
        Log(msg.sender, 0, "getvalue()=>", "0", betinfos[client_addr].value);
        return betinfos[client_addr].value;
    }
    function getchoice(address client_addr) returns (uint) 
    {
        Log(msg.sender, 0, "getchoice()=>", "0", betinfos[client_addr].choice);
        return betinfos[client_addr].choice;
    }
    function lucky() returns (uint) 
    {
        if (owner != msg.sender)
            throw;
        var r = 0;
        for (var i = 0; i < numaddrs; i+=1)
        {
            if (betinfos[addrs[i]].choice == testluckyone)
            {
                winers[numwiners++] = addrs[i];
                r += 1;
                Log(msg.sender, 0, "lucky() winers:", "0", testluckyone);
            }
        }
        return r;
    }
}


#+END_SRC

**** 一些待定的问题
- 智能合约参数设定，一些有关游戏规则的动态变化如何来设定。
- 智能合约执行的时候检测，需要保存用户信息。如何来保存。
- 如何做到智能开奖，智能合约能否做到？假如有1万个用户下注，智能合约脚本可以获取到用户信息吗？
- 如何兑奖，涉及到多个帐户转帐。比如1万个帐户。
- 钱包的问题，一个用户在中心网站注册生成一个下注地址，涉及到如何通过程序创建钱包。以及钱包的管理问题。
- 闪电网络现在还没有成熟起来，后续我们如何用闪电网络的问题？
- 每一个用户下注的时候在智能合约里面就知道用户的Address地址，下了多少注，下注内容，这些信息都需要保存起来。如果用户量比较大的时候。这时候会不会有问题？



**** 项目积累
****** 如何得到合约的地址：
当生成合约之后，必须要挖矿确认之后才能得到合约的详细信息。
而web3.eth.getBlock(110, true)并不能得到整个合约的全部信息，尤其是合约的地址是得不到的。
而必须用：eth.getTransactionReceipt()

#+BEGIN_SRC text

> web3.eth.getBlock(141, true)
{
  difficulty: 139055,
  extraData: "0xd683010306844765746885676f312e368664617277696e",
  gasLimit: 4712388,
  gasUsed: 484694,
  hash: "0x2003002815938e74a5666646a7e17cb046e69a3b0934f910b2e4e8311bc4fdd4",
  logsBloom: "0x
  miner: "0x80ea281652d9e4bc7acae2e19f1708f0c09f631e",
  nonce: "0x7734e226753ab6c0",
  number: 141,
  parentHash: "0x5d143552674ec9fff6a587672e41b525cbe2d7dd355e4d4ed379164aa444c5f0",
  receiptRoot: "0x7dbdb3381425b546e33d695a35834637173f3872d9dbff0633ffdd648a2c7800",
  sha3Uncles: "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
  size: 2372,
  stateRoot: "0x07500994f91834cf49b5132e3c1f6f20561678ce2ab91682592630749b9b5444",
  timestamp: 1462776675,
  totalDifficulty: 19155376,
  transactions: [{
      blockHash: "0x2003002815938e74a5666646a7e17cb046e69a3b0934f910b2e4e8311bc4fdd4",
      blockNumber: 141,
      from: "0x80ea281652d9e4bc7acae2e19f1708f0c09f631e",
      gas: 3000000,
      gasPrice: 20000000000,
      hash: "0x8db23bef9d879d96eecdc2b56b4a0f88c705451fcccf11981ae8a9b66cd89ae2",
      input: "0x60606040525b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908302179055505b6106938061003f6000396000f360606040523615610074576000357c01000000000000000000000000000000000000000000000000000000009004806321f408be146100765780632b02329114610099578063867904b4146100b157806395d19aa9146100d2578063a9059cbb146100f5578063f8b2cb4f1461011657610074565b005b6100836004805050610142565b6040518082815260200191505060405180910390f35b6100af600480803590602001909190505061014b565b005b6100d060048080359060200190919080359060200190919050506101fb565b005b6100df6004805050610332565b6040518082815260200191505060405180910390f35b61011460048080359060200190919080359060200190919050506103df565b005b61012c60048080359060200190919050506105ba565b6040518082815260200191505060405180910390f35b60016000505481565b8060016000828282505401925050819055507faa862530b4170d64d4a92b927c70b48070a023dd357737fd6e01067193ffb19333600083604051808473ffffffffffffffffffffffffffffffffffffffff168152602001838152602001806020018381526020018281038252600a8152602001807f7365745f746b28293d3e0000000000000000000000000000000000000000000081526020015060200194505050505060405180910390a15b50565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561025757610002565b80600260005060008473ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828282505401925050819055507faa862530b4170d64d4a92b927c70b48070a023dd357737fd6e01067193ffb19333600083604051808473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001838152602001828103825260098152602001807f697373756528293d3e000000000000000000000000000000000000000000000081526020015060200194505050505060405180910390a15b5050565b60007faa862530b4170d64d4a92b927c70b48070a023dd357737fd6e01067193ffb1933360006082604051808473ffffffffffffffffffffffffffffffffffffffff168152602001838152602001806020018381526020018281038252600a8152602001807f6765745f746b28293d3e0000000000000000000000000000000000000000000081526020015060200194505050505060405180910390a160016000505490506103dc565b90565b80600260005060003373ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005054101561041b57610002565b80600260005060003373ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282825054039250508190555080600260005060008473ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828282505401925050819055507faa862530b4170d64d4a92b927c70b48070a023dd357737fd6e01067193ffb193338383604051808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001806020018381526020018281038252600c8152602001807f7472616e7366657228293d3e000000000000000000000000000000000000000081526020015060200194505050505060405180910390a17fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef338383604051808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15b5050565b60007faa862530b4170d64d4a92b927c70b48070a023dd357737fd6e01067193ffb1933360006081604051808473ffffffffffffffffffffffffffffffffffffffff168152602001838152602001806020018381526020018281038252600e8152602001807f67657442616c616e636528293d3e00000000000000000000000000000000000081526020015060200194505050505060405180910390a1600260005060008373ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005054905061068e565b91905056",
      nonce: 4,
      to: null,
      transactionIndex: 0,
      value: 0
  }],
  transactionsRoot: "0x498ca1b79246ec70981b1d3af7749948ec3f198379c2e173373dd2df58dd7e14",
  uncles: []
}
> eth.getTransactionReceipt('0x8db23bef9d879d96eecdc2b56b4a0f88c705451fcccf11981ae8a9b66cd89ae2')
{
  blockHash: "0x2003002815938e74a5666646a7e17cb046e69a3b0934f910b2e4e8311bc4fdd4",
  blockNumber: 141,
  contractAddress: "0xcb1217e9be7957a6d964a50e9e92b6e2cd5ee4ac",
  cumulativeGasUsed: 484694,
  gasUsed: 484694,
  logs: [],
  transactionHash: "0x8db23bef9d879d96eecdc2b56b4a0f88c705451fcccf11981ae8a9b66cd89ae2",
  transactionIndex: 0
}

#+END_SRC

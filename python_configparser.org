#+title: configparser模块

**** python读取配置文件 

现在在配置文件格式有许多，有xml,json.ini.conf等等。

这些配置各有其特长吧。我这里用最简单的.conf的配置文件。

利用python自带的 *ConfigParser* 模块来读取。

**** 读取配置文件

| 函数名                 | 功能                                                                              |
|------------------------+-----------------------------------------------------------------------------------|
| read(filename)         | 直接读取ini文件内容                                                               |
| sections()             | 得到所有的section，并以列表的形式返回                                             |
| options(section)       | 得到该section的所有option                                                         |
| items(section)         | 得到该section的所有键值对                                                         |
| get(section,option)    | 得到section中option的值，返回为string类型                                         |
| getint(section,option) | 得到section中option的值，返回为int类型，还有相应的getboolean()和getfloat() 函数。 |


**** 写入配置文件

| 函数                         | 功能                                                           |
|------------------------------+----------------------------------------------------------------|
| add_section(section)         | 添加一个新的section                                            |
| set( section, option, value) | 对section中的option进行设置，需要调用write将内容写入配置文件。 |


**** 基本例子

****** test.conf
#+BEGIN_SRC text
[sec_a] 
a_key1 = 20 
a_key2 = 10 
   
[sec_b] 
b_key1 = 121 
b_key2 = b_value2 
b_key3 = $r 
b_key4 = 127.0.0.1
#+END_SRC

****** parse_test_conf.py

#+BEGIN_SRC python
import ConfigParser 
cf = ConfigParser.ConfigParser() 
#read config 
cf.read("test.conf") 
# return all section 
secs = cf.sections() 
print 'sections:', secs  #sections: ['sec_b', 'sec_a']
   
opts = cf.options("sec_a") 
print 'options:', opts # options: ['a_key1', 'a_key2'] 
   
kvs = cf.items("sec_a") 
print 'sec_a:', kvs # sec_a: [('a_key1', "i'm value"), ('a_key2', '22')] 
   
#read by type 
str_val = cf.get("sec_a", "a_key1") 
int_val = cf.getint("sec_a", "a_key2") 
   
print "value for sec_a's a_key1:", str_val # value for sec_a's a_key1: i'm value 
print "value for sec_a's a_key2:", int_val # value for sec_a's a_key2: 22
   
#write config 
#update value 
cf.set("sec_b", "b_key3", "new-$r") 
#set a new value 
cf.set("sec_b", "b_newkey", "new-value") 
#create a new section 
cf.add_section('a_new_section') 
cf.set('a_new_section', 'new_key', 'new_value') 
   
#write back to configure file 
cf.write(open("test.conf", "w"))

#+END_SRC


****** 得到终端输出：

#+BEGIN_SRC bash
sections: ['sec_b', 'sec_a'] 
options: ['a_key1', 'a_key2'] 
sec_a: [('a_key1', "i'm value"), ('a_key2', '22')] 
value for sec_a's a_key1: i'm value 
value for sec_a's a_key2: 22
#+END_SRC

更新后的test.conf
#+BEGIN_SRC text
[sec_b] 
b_newkey = new-value 
b_key4 = 127.0.0.1 
b_key1 = 121 
b_key2 = b_value2 
b_key3 = new-$r 
   
[sec_a] 
a_key1 = i'm value 
a_key2 = 22 
   
[a_new_section] 
new_key = new_value
#+END_SRC

**** RawConfigParser
Python的ConfigParser Module中定义了3个类对INI文件进行操作。

分别是 *RawConfigParser* 、 *ConfigParser* 、 *SafeConfigParser* 。

RawCnfigParser是最基础的INI文件读取类， *ConfigParser* 、 *SafeConfigParser* 支持对%(value)s变量的解析。 

设定配置文件test2.conf
#+BEGIN_SRC text
[portal] 
url = http://%(host)s:%(port)s/Portal 
host = localhost 
port = 8080
#+END_SRC

使用RawConfigParser：
#+BEGIN_SRC python
import ConfigParser 
  
cf = ConfigParser.RawConfigParser() 
  
print "use RawConfigParser() read" 
cf.read("test2.conf") 
print cf.get("portal", "url") 
  
print "use RawConfigParser() write" 
cf.set("portal", "url2", "%(host)s:%(port)s") 
print cf.get("portal", "url2")

#+END_SRC

得到终端输出：
#+BEGIN_SRC bash
use RawConfigParser() read 
http://%(host)s:%(port)s/Portal 
use RawConfigParser() write 
%(host)s:%(port)s
#+END_SRC

改用ConfigParser：
#+BEGIN_SRC python
import ConfigParser 
  
cf = ConfigParser.ConfigParser() 
  
print "use ConfigParser() read" 
cf.read("test2.conf") 
print cf.get("portal", "url") 
  
print "use ConfigParser() write" 
cf.set("portal", "url2", "%(host)s:%(port)s") 
print cf.get("portal", "url2")
#+END_SRC

得到终端输出：
#+BEGIN_SRC bash
use ConfigParser() read 
http://localhost:8080/Portal 
use ConfigParser() write 
localhost:8080
#+END_SRC


改用SafeConfigParser：
#+BEGIN_SRC python
import ConfigParser 
  
cf = ConfigParser.SafeConfigParser() 
  
print "use SafeConfigParser() read" 
cf.read("test2.conf") 
print cf.get("portal", "url") 
  
print "use SateConfigParser() write" 
cf.set("portal", "url2", "%(host)s:%(port)s") 
print cf.get("portal", "url2")
#+END_SRC


得到终端输出(效果同ConfigParser)：
#+BEGIN_SRC bash
use SafeConfigParser() read 
http://localhost:8080/Portal 
use SateConfigParser() write 
localhost:8080
#+END_SRC


- [[http://www.pythontab.com/html/2014/pythonhexinbiancheng_1120/919.html][Python 解析配置模块之ConfigParser详解]]

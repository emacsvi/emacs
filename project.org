#+title: 以太坊智能彩票系统问题汇总

**** 一些待定的问题
- 智能合约参数设定，一些有关游戏规则的动态变化如何来设定。
- 智能合约执行的时候检测，需要保存用户信息。如何来保存。
- 如何做到智能开奖，智能合约能否做到？假如有1万个用户下注，智能合约脚本可以获取到用户信息吗？
- 如何兑奖，涉及到多个帐户转帐。比如1万个帐户。
- 钱包的问题，一个用户在中心网站注册生成一个下注地址，涉及到如何通过程序创建钱包。以及钱包的管理问题。
- 闪电网络现在还没有成熟起来，后续我们如何用闪电网络的问题？
- 每一个用户下注的时候在智能合约里面就知道用户的Address地址，下了多少注，下注内容，这些信息都需要保存起来。如果用户量比较大的时候。这时候会不会有问题？


**** 语法

#+BEGIN_SRC js

/// @title Voting with delegation.
contract Ballot
{
    // This declares a new complex type which will
    // be used for variables later.
    // It will represent a single voter.
    struct Voter
    {
        uint weight; // weight is accumulated by delegation
        bool voted;  // if true, that person already voted
        address delegate; // person delegated to
        uint vote;   // index of the voted proposal
    }
    // This is a type for a single proposal.
    struct Proposal
    {
        bytes32 name;   // short name (up to 32 bytes)
        uint voteCount; // number of accumulated votes
    }

    address public chairperson;
    // This declares a state variable that
    // stores a `Voter` struct for each possible address.
    mapping(address => Voter) public voters;
    // A dynamically-sized array of `Proposal` structs.
    Proposal[] public proposals;

    /// Create a new ballot to choose one of `proposalNames`.
    function Ballot(bytes32[] proposalNames)
    {
        chairperson = msg.sender;
        voters[chairperson].weight = 1;
        // For each of the provided proposal names,
        // create a new proposal object and add it
        // to the end of the array.
        for (uint i = 0; i < proposalNames.length; i++)
            // `Proposal({...})` creates a temporary
            // Proposal object and `proposal.push(...)`
            // appends it to the end of `proposals`.
            proposals.push(Proposal({
                name: proposalNames[i],
                voteCount: 0
            }));
    }

    // Give `voter` the right to vote on this ballot.
    // May only be called by `chairperson`.
    function giveRightToVote(address voter)
    {
        if (msg.sender != chairperson || voters[voter].voted)
            // `throw` terminates and reverts all changes to
            // the state and to Ether balances. It is often
            // a good idea to use this if functions are
            // called incorrectly. But watch out, this
            // will also consume all provided gas.
            throw;
        voters[voter].weight = 1;
    }

    /// Delegate your vote to the voter `to`.
    function delegate(address to)
    {
        // assigns reference
        Voter sender = voters[msg.sender];
        if (sender.voted)
            throw;
        // Forward the delegation as long as
        // `to` also delegated.
        while (voters[to].delegate != address(0) &&
               voters[to].delegate != msg.sender)
            to = voters[to].delegate;
        // We found a loop in the delegation, not allowed.
        if (to == msg.sender)
            throw;
        // Since `sender` is a reference, this
        // modifies `voters[msg.sender].voted`
        sender.voted = true;
        sender.delegate = to;
        Voter delegate = voters[to];
        if (delegate.voted)
            // If the delegate already voted,
            // directly add to the number of votes
            proposals[delegate.vote].voteCount += sender.weight;
        else
            // If the delegate did not vote yet,
            // add to her weight.
            delegate.weight += sender.weight;
    }

    /// Give your vote (including votes delegated to you)
    /// to proposal `proposals[proposal].name`.
    function vote(uint proposal)
    {
        Voter sender = voters[msg.sender];
        if (sender.voted) throw;
        sender.voted = true;
        sender.vote = proposal;
        // If `proposal` is out of the range of the array,
        // this will throw automatically and revert all
        // changes.
        proposals[proposal].voteCount += sender.weight;
    }

    /// @dev Computes the winning proposal taking all
    /// previous votes into account.
    function winningProposal() constant
            returns (uint winningProposal)
    {
        uint winningVoteCount = 0;
        for (uint p = 0; p < proposals.length; p++)
        {
            if (proposals[p].voteCount > winningVoteCount)
            {
                winningVoteCount = proposals[p].voteCount;
                winningProposal = p;
            }
        }
    }
}

#+END_SRC

****** Event事件



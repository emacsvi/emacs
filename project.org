
#+title: 问题汇总

**** 上海交流会以太坊问题


| 知识点     | 具体内容                                                                                                                    | 解决方案                                              |
|------------+-----------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------|
| storage    | 智能合约里面保存数据的容量有没有限制                                                                                        | 没有限制，但是费用高。慎用                            |
|            | storage的使用是如何收费的                                                                                                   | 本地存储不收费                                        |
|            | 查询storage里面的信息是如何收费的，能不能有办法归避收费的问题                                                               | 本地存储的方式来查询                                  |
|            | 如果信息量过大的话，查询效率能不能保证                                                                                      | 尽量不要在合约里面做查询的操作                        |
|            | 有没有接口能将storage里面的数据导出来。导出来会不会收费                                                                     | 有，本地化解决                                        |
|            | storage数据太大时，性能是否可以保证                                                                                         | 不能                                                  |
|------------+-----------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------|
| 合约相关   | 智能合约有没有一个timer定时器的功能，做到定时触发一个机制去做某件事情                                                       | 没有                                                  |
|            |                                                                                                                             |                                                       |
|            | 合约到期到，如果不需要此合约了，如何清除此合约。所谓的清除是其他节点再来调用则不会成功                                      | 这个suicide()之后地址永远存在，但是里面的内容是空的。 |
|            | 合约清除的时候 *msg.sender.send(this.balance)* 和 *suicide(owner)* 有什么不一样，是都要调用吗？                             | 用suicide()就可以                                     |
|            | 作为一个普通用户，如果查看到智能合约相关的源代码。并且通过查看源代码的内容相信此合约没有作假行为                            | 开源，再利用solc编译后的hash值或者code来查看真实性。  |
|            | 作为一个节点用户，除了通过合约地址与合约的ABI调用某个合约之外，还有没有其他方式调用合约的接口                               | 没有                                                  |
|            | 当调用合约失败了，如何才能给用户一个比较友好的提示，让用户知道调用合约失败。失败原因提示给用户                              | 只能利用event事件。                                   |
|            | 调用合约除了geth钱包外，rpc外，还有没有其他办法，另外rpc调用是如何调用的。钱包geth调用除了console方式还有没有其他友好的方式 | ipc方式可以                                           |
|            | 写合约的语言有solidity,LLL,类python等，哪种是语言用得比较多，各个语言之间有什么差异                                         | solc                                                  |
|            | 开发智能合约有比较好用的IDE工具推荐吗，工作环境搭建上还不是很清楚                                                           | truffle                                               |
|            | 智能合约地址里面的钱是否安全？                                                                                              | 是                                                    |
|------------+-----------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------|
| 以太坊问题 | 以太坊每一笔交易基本上都要收费，这笔费用是按什么计价来收取的                                                                | 看黄皮书最后                                          |
|            | 以太坊收费有没有其他方式来减少费用，比如打包交易等                                                                          | 没有                                                  |
|            | 以太坊是底层是完全开源的吗                                                                                                  | 是                                                    |
|            | 以太坊上面跑的智能合约会越来越多，storage空间以后也会越来越大，这个问题以后会导致每一个节点同步很慢吗                       | 会                                                    |
|            | 轻客户端有没有限制，可以任意地获取某些block之后的吗                                                                         | 可以                                                  |
|            | 钱包的问题，可否单纯的输入密码完成交易，web3代码安全性问题..                                                                | 不能                                                  |


**** 培训整理

- [[https://github.com/ethereum/wiki/wiki/%5B中文%5D-以太坊白皮书][以太坊白皮书]]
- [[http://ethfans.org/topics/112][merkle树]]
- [[https://github.com/ethereum/wiki/wiki/%5B中文%5D-以太坊术语表][以太坊术语表]]

****** 一些基础概念：
- 所有权的确定是利用数字签名来实现的。这个钱是谁的就由谁来签名认证的。
- 双花的问题以太坊与比特币有不一样的解决方案。first to flie && long chain wins
- 矿工做的三件事情：
  1. 交易打包;
  2. 给自己打钱；奖励的钱;
  3. 向外布发送打包好的block.

- 三种共识机制：
  1. pow(Proof of work):工作量证明，利用计算机算力去找随机数的方式进行奖励.决定下一个区块的生产者。
  2. pos(Proof of Stake): 股权证明，根据你持有货币的量和时间，给你发利息的一个制度。
  3. dpos: 股权授权证明系统。彩用股权投票的方式决定谁来生产区块。

- 密码学里的椭圆曲线加密方式。还包括如下一些：
  1. public-key cryptography
  2. hash
  3. digital signature
  4. Ring signature 环签名，主要是用来解决隐私的问题。
  5. Homomorphic encryptoin 同态加密，现在还不成熟。主要是直接对加密的东西无需解决就可以做运算。

- p2p network(devp2p[以太坊用的pydevp2p的一个p2p库]/libp2p[go-libp2p是一个golang的p2p库])
- 去中心化(Decentralized)
- 去信任机制(Trustless)
- 集体维护由大家来维护的信任体系。collectively maintain.
- 开源
- 匿名性，虽然是伪匿名，但是还是有一些用。


以太坊与比特币能解决的问题：
- 图灵完备性(for)
- 价值盲(value-blindnes)
- 缺少状态
- 区块链盲

- 公有链、联盟链(公布式帐本，受限的)
- IPFS/swarm
- 智能合约是计算机协议
- 用计算机代码替代法律条文，作为规则描述的形式。
- 启动强制执行。

*可编程的自由资产*

比特币VS以太坊
| 比特币               | 以太坊                    |
|----------------------+---------------------------|
| UTXO模型             | 利用以太坊帐户余额系统    |
| 默克尔树             | Patricia tree(帕特里夏树) |
| 脚本语言(非图灵完备) | EVM图灵完备语言           |

EVM:
1. 执行智能合约的字节码(只是字节码)
2. 由多种语言实现EVM code的编写
3. 使用gas作为经济激励机制。

gas相关的:
- 以太坊使用gas作为经济激励机制。
- gas price: 是一套交易打包的收费标准，不过有个最低的值，最低的值是一个定值。
- gas的消费在黄皮书的最后附页里面有。

以太坊的几个阶段：

| olympic | Frontier | 大都会 | 和谐 | 

  
智能合约的几个元素：
1. 运行在链上的单元
2. API提前定义好的
3. 有public地址
4. 被交易调用

Event：
1. Event只是用于通知用的。
2. 有了Event之后，智能合约能与智能合约进行通信了。


如果发布一个智能合约，并且公开这个智能合约，要让用户完全信任你的合约，你需要公开源代码，用户利用solc将源码编译之后可以与你的code与IBA进行对比加以信任。

****** 有关地址与帐户私钥：

geth account new

*ls -lht ~/Library/Etherem/keystore/* 里面存着你的私钥

地址是公钥的2次hash得到的。
而公钥是私钥得到的，所以如果你的公钥丢了，只要私钥还在，那还可以找回公钥。
私钥是未加密的。如果你想保存私钥是没有办法的。如果想将私钥文件里面的私钥导出来是不可逆的。
但是可以先生成私钥，再将私钥import到钱包里面。这样你可以备份好你的钱包。

#+BEGIN_SRC bash

ramdan 32 -hex > priv.key
geth account import priv.key

#+END_SRC

系统自动生成的私钥文件格式：
#+BEGIN_SRC js
➜  liwei2 cat ~/Library/Ethereum/keystore/UTC--2016-04-23T07-37-57.646527808Z--ccac46e3cdc8c9186ac4f2d872fc36fe900b9aa9 | json_pp
{
   "address" : "ccac46e3cdc8c9186ac4f2d872fc36fe900b9aa9",
   "id" : "5c598514-11f8-4ced-8b4f-195eedf1457c",
   "Crypto" : {
      "kdf" : "scrypt",
      "mac" : "ddcd9e61e810e7c8bd0dcbe0428b8fe319dd632c9f6e45ad1396a563ba97e6cb",
      "kdfparams" : {
         "salt" : "05dae281189a7f77a52aeed55f33cd648fba37e641da690bdc48608f50e1162b",
         "n" : 262144,
         "p" : 1,
         "r" : 8,
         "dklen" : 32
      },
      "cipher" : "aes-128-ctr",
      "cipherparams" : {
         "iv" : "1666404490587cad6fafcb63a81121aa"
      },
      "ciphertext" : "4c90e3e52d9e9e54cf2294c7ef176394455eb5e7aca6fbd965d585892235e895"
   },
   "version" : 3
}


#+END_SRC

以太坊有两种帐户：
1. 一种是像合约一样，合约是没有私钥的，只有址址。
2. 另外一种是普通用户帐户，有私钥。


****** 有关ipc的方式：


#+BEGIN_SRC bash
# --dev 不挖矿
geth --dev --datadir --networkid "129"

# 在别一个节点可以利用ipc的方式进行通信:
geth attach ipc://Users/liweilijie/Domain/ethdata/geth.ipc #socket文件

# 查看挖多少矿：
eth.blockNumber()

# coinbase默认是第一个用户，不过也可以为其指定另外一个。
eth.coinbase == web3.eth.accounts[0]
#+END_SRC


****** solidity

#+BEGIN_SRC js

uint x;
int constant a = 8;
int128 constant b = 8;
int256 constant c = 8;

// uint8, uint16, uint32,uint40,....uint128....uint256 以8的步长增加到256

#+END_SRC

bytes与string有什么区别：
- bytes是可变长的，而string是不可变的。bytes是数组，string是常量。
- bytes比较费油，而string比较省油。一定要考虑清楚用哪种结构。

#+BEGIN_SRC js

bytes32 [5] nickname; // static array;

bytes32 [] names; // dynamic array;

delete balances["John"]; // 删除map之中的一个值。

#+END_SRC


solidity几个神奇的全局变量：
| 变量名称           | 意义                 |
|--------------------+----------------------|
| msg.sender         | 调用合约那个人的地址 |
| msg.value          | 调用合约付的费用     |
| msg.gas            | 调用合约收取的油费   |
|--------------------+----------------------|
| tx.origin          | 交易的地址           |
| tx.gasprice        | 交易油费价           |
|--------------------+----------------------|
| now                | 当前时间             |
| block.number       | 当前块号             |
| block.difficulty() | 块的难度             |
| block.gaslimit()   | xxxxx                |



#+BEGIN_SRC js

// 存本地
storage['abc'] = "def";

// local存储，本地存储全都是string=>string的方式
mapping(string => string)

#+END_SRC

constant如果在函数之中：
1. 不改变合约里面的值
2. 存在本地，不会到链上

如果在function里面报错，或者如果thorw掉，会回退回去，吃掉gas;

- public: 公共的，默认就是public。其他合约或者外部节点都可以调用。
- private: 私有的，只有合约里面的才能调用。
- external: 只允许合约之间进行调用。
- internal: 与external相反，不允许合约之间进行调用。

throw:
- 现在只有一种异常。也就是 *out of gas*.
- throw的话会将客户传过来的所有Gas吃掉。并且回退到栈顶

合约在没有生成好的时候其实是可以计算出来的。也就是合约是通过创建者的地址与nonce值进行hash得到一个地址。
所以利用这点我们在new 一个合约之前，就可以向这个合约地址先打钱。打很多的钱之后再进行创建合约。归避后续费比较贵的问题。

- 以太坊其实是一个很裸的os，可以在里面写一些类似库一样的智能合约给其他人调用。不过这个合约的隐私性就不能保证了。

****** 最后讨论以太坊DAPP的一些问题
1. gas复杂度一定要考虑。
2. 智能合约最好只存一些帐本信息最好。不要做太复杂的逻辑处理功能。没有意义。
3. 黄皮书最后附录能看到gas的价格。
4. 与智能合约配合的还要有其他的数据库类型来存储数据。
5. uint128最贵，uint8次贵，uint256便宜。
6. contab定时任务还是有办法在外面解决，但是不太容易做。
7. privacy隐私的问题现在解决不了。还是不用担心人家抄袭了，整个产品不只是一个合约那么简单的。很多资源是抄袭不来的。
8. 智能合约如何能获取外部数据这是个问题。
9. 链外资产如何得到，比如想用人民币来调用合约。
10. proxy合约（它再调用deamon合约或者monitor合约等）
11. 合约发布后不可修改，代码有bug的话也不能修改。
12. 透明性，合约是完全透明的。









